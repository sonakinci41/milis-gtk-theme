# Plymouth boot theme for Milis Linux
#
# Copyright (C) 2018-2019
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.


#------------------------------String functions-------------------------------

# This is the equivalent for strstr()
fun StringString(string, substring) {
    start = 0;
    while (String(string).CharAt (start)) {
        walk = 0;
        while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
            walk++;
            if (!String(substring).CharAt (walk)) return start;
        }
        start++;
    }
    
    return NULL;
}

fun StringLength (string) {
    index = 0;
    while (String(string).CharAt(index)) index++;
    return index;
}

fun StringCopy (source, beginning, end) {
    local.destination = "";
    for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
        local.destination += String(source).CharAt(index);
    }
    
    return local.destination;
}

fun StringReplace (source, pattern, replacement) {
    local.found = StringString(source, pattern);
    if (local.found == NULL)
        return source;

    local.new_string = StringCopy (source, 0, local.found - 1) +
                       replacement +
                       StringCopy (source, local.found + StringLength(pattern), NULL);

    return local.new_string;
}

# it makes sense to use it only for
# numbers up to 100
fun StringToInteger (str) {
    int = -1;
    for (i=0; i<=100; i++) {
        if (i+"" == str) {
            int = i;
            break;
        }
    }
    return int;
}

#-----------------------------------------------------------------------------
Window.SetBackgroundTopColor (207.00, 208.00, 194.00);
Window.SetBackgroundBottomColor (207.00, 208.00, 194.00);

logo_filename = "logo.png";
blurred_logo_filename = "logo_blurred.png";

logo.screen_size = Math.Sqrt ( Window.GetHeight () * Window.GetWidth () / 18 );

logo.image = Image (logo_filename).Scale (logo.screen_size, logo.screen_size);
logo.sprite = Sprite ();
logo.sprite.SetImage (logo.image);
logo.width = logo.image.GetWidth ();
logo.height = logo.image.GetHeight ();
logo.x = Window.GetX () + Window.GetWidth () / 2 - logo.width  / 2;
logo.y = Window.GetY () + Window.GetHeight () / 2 - logo.height / 2 ;
logo.z = 1000;
logo.sprite.SetX (logo.x);
logo.sprite.SetY (logo.y);
logo.sprite.SetZ (logo.z);
if (Plymouth.GetMode () == "boot" || Plymouth.GetMode () == "resume") {
    logo.sprite.SetOpacity (0); # for init puproses only; superseded by opacity angle below
    logo.opacity_angle = Math.Pi; # we'll need it later for cosine fade-in
}
else if (Plymouth.GetMode () == "shutdown" || Plymouth.GetMode () == "suspend") {
    logo.sprite.SetOpacity (1); # for init puproses only; superseded by opacity angle below
    logo.opacity_angle = 0; # we'll need it later for cosine fade-in
}


# assumes the blurred image has the same size as the main one
logo_blurred.image = Image (blurred_logo_filename).Scale (logo.screen_size, logo.screen_size);
logo_blurred.sprite = Sprite ();
logo_blurred.sprite.SetImage (logo_blurred.image);
logo_blurred.width = logo_blurred.image.GetWidth ();
logo_blurred.height = logo_blurred.image.GetHeight ();
logo_blurred.x = Window.GetX () + Window.GetWidth () / 2 - logo_blurred.width  / 2;
logo_blurred.y = Window.GetY () + Window.GetHeight () / 2 - logo_blurred.height / 2;
logo_blurred.z = 999;
logo_blurred.sprite.SetX (logo_blurred.x);
logo_blurred.sprite.SetY (logo_blurred.y);
logo_blurred.sprite.SetZ (logo_blurred.z);
logo_blurred.sprite.SetOpacity (0);
logo_blurred.opacity_angle = Math.Pi; # we'll need it later for cosine fade-in

# Spacing below the logo - in pixels
logo_spacing = logo.height / 8;

#-----------------------------------------Refresh stuff --------------------------------
#
# Calling Plymouth.SetRefreshFunction with a function will set that function to be
# called up to 50 times every second, e.g.
#
# NOTE: if a refresh function is not set, Plymouth doesn't seem to be able to update
#       the screen correctly
#
fun refresh_callback ()
{
    if (Plymouth.GetMode () == "boot" || Plymouth.GetMode () == "resume") {
        logo.opacity_angle += ((2 * Math.Pi) / 50) * 0.2;  # 0.2 HZ
        opacity = ( Math.Cos (logo.opacity_angle) + 1) / 2;
        if ( opacity > logo.sprite.GetOpacity () )
            logo.sprite.SetOpacity (opacity);
        else {
            logo.sprite.SetOpacity (1);
            logo_blurred.opacity_angle += ((2 * Math.Pi) / 50) * 0.4;  # 0.4 HZ
            opacity_blurred = ( Math.Cos (logo_blurred.opacity_angle) + 1) / 2;
            logo_blurred.sprite.SetOpacity (opacity_blurred);
        }
    }
    else if (Plymouth.GetMode () == "shutdown" || Plymouth.GetMode () == "suspend") {
        logo.opacity_angle += ((2 * Math.Pi) / 50) * 0.1;  # actually 0.05 HZ because of the division below
        opacity = ( Math.Cos (logo.opacity_angle) + 1) / 4 + 0.5;
        if ( opacity < logo.sprite.GetOpacity () )
            logo.sprite.SetOpacity (opacity);
    }
    else
    {
        logo.sprite.SetOpacity (1);
    }
}
Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Quit --------------------------------

# TODO: Maybe we should also hide any other dialog
# Show the logo and make the progress indicator look full when on exit
fun quit_callback ()
{
    logo.sprite.SetOpacity (1);
    switch_on_bullets (); 
}

Plymouth.SetQuitFunction(quit_callback);
